# Auto-generated using compose2nix v0.1.9.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."portainer" = {
    image = "docker.io/portainer/portainer-ce";
    volumes = [
      "/run/docker.sock:/var/run/docker.sock:rw,Z"
      "portainer_data:/data:rw,Z"    ];
    ports = [
      "9000:9000/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=portainer-ce"
      "--network=portainer_default"
      "--security-opt=label=disable"
    ];
  };
  systemd.services."docker-portainer" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "no";
    };
    after = [
      "docker-network-portainer_default.service"
    ];
    requires = [
      "docker-network-portainer_default.service"
    ];
    partOf = [
      "docker-compose-portainer-root.target"
    ];
    wantedBy = [
      "docker-compose-portainer-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-portainer_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "${pkgs.docker}/bin/docker network rm -f portainer_default";
    };
    script = ''
      docker network inspect portainer_default || docker network create portainer_default
    '';
    partOf = [ "docker-compose-portainer-root.target" ];
    wantedBy = [ "docker-compose-portainer-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-portainer-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
